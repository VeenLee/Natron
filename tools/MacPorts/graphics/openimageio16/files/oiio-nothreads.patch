diff --git a/src/include/OpenImageIO/imagebufalgo_util.h b/src/include/OpenImageIO/imagebufalgo_util.h
index b92a7bb..30539af 100644
--- a/src/include/OpenImageIO/imagebufalgo_util.h
+++ b/src/include/OpenImageIO/imagebufalgo_util.h
@@ -85,6 +85,9 @@ template <class Func>
 void
 parallel_image (Func f, ROI roi, int nthreads=0)
 {
+#ifdef NOTHREADS
+    f (roi);
+#else // !NOTHREADS
     // Special case: threads <= 0 means to use the "threads" attribute
     if (nthreads <= 0)
         OIIO::getattribute ("threads", nthreads);
@@ -107,6 +110,7 @@ parallel_image (Func f, ROI roi, int nthreads=0)
         }
         threads.join_all ();
     }
+#endif // !NOTHREADS
 }
 
 
diff --git a/src/include/OpenImageIO/thread.h b/src/include/OpenImageIO/thread.h
index 3d0737c..d4ca7df 100644
--- a/src/include/OpenImageIO/thread.h
+++ b/src/include/OpenImageIO/thread.h
@@ -834,6 +834,7 @@ typedef spin_rw_mutex::write_lock_guard spin_rw_write_lock;
 
 
 
+#ifndef NOTHREADS
 /// Simple thread group class. This is just as good as boost::thread_group,
 /// for the limited functionality that we use.
 class thread_group {
@@ -871,6 +872,7 @@ private:
     mutex m_mutex;
     std::vector<thread *> m_threads;
 };
+#endif // NOTHREADS
 
 
 OIIO_NAMESPACE_END
diff --git a/src/libOpenImageIO/imagebufalgo_compare.cpp b/src/libOpenImageIO/imagebufalgo_compare.cpp
index e536952..2cb8aa5 100644
--- a/src/libOpenImageIO/imagebufalgo_compare.cpp
+++ b/src/libOpenImageIO/imagebufalgo_compare.cpp
@@ -832,6 +832,11 @@ ImageBufAlgo::computePixelHashSHA1 (const ImageBuf &src,
     if (blocksize <= 0 || blocksize >= roi.height())
         return simplePixelHashSHA1 (src, extrainfo, roi);
 
+#ifdef NOTHREADS
+    int nblocks = 1;
+    std::vector<std::string> results (1);
+    sha1_hasher (&src, roi, blocksize, &results[0], 0);
+#else // !NOTHREADS
     // Request for 0 threads means "use the OIIO global thread count"
     if (nthreads <= 0)
         OIIO::getattribute ("threads", nthreads);
@@ -856,6 +861,7 @@ ImageBufAlgo::computePixelHashSHA1 (const ImageBuf &src,
         }
         threads.join_all ();
     }
+#endif // !NOTHREADS
 
 #ifdef USE_OPENSSL
     // If OpenSSL was available at build time, use its SHA-1
diff --git a/src/testtex/testtex.cpp b/src/testtex/testtex.cpp
index 8cff8a9..11ac603 100644
--- a/src/testtex/testtex.cpp
+++ b/src/testtex/testtex.cpp
@@ -180,7 +180,9 @@ getargs (int argc, const char *argv[])
                   "--derivs", &test_derivs, "Test returning derivatives of texture lookups",
                   "--resetstats", &resetstats, "Print and reset statistics on each iteration",
                   "--testhash", &testhash, "Test the tile hashing function",
+#ifndef NOTHREADS
                   "--threadtimes %d", &threadtimes, "Do thread timings (arg = workload profile)",
+#endif // NOTHREADS
                   "--trials %d", &ntrials, "Number of trials for timings",
                   "--wedge", &wedge, "Wedge test",
                   "--testicwrite %d", &testicwrite, "Test ImageCache write ability (1=seeded, 2=generated)",
@@ -825,6 +827,7 @@ test_hash ()
 
 
 
+#ifndef NOTHREADS
 static const char *workload_names[] = {
     /*0*/ "None",
     /*1*/ "Everybody accesses the same spot in one file (handles)",
@@ -961,6 +964,7 @@ launch_tex_threads (int numthreads, int iterations)
     ASSERT ((int)threads.size() == numthreads);
     threads.join_all ();
 }
+#endif // NOTHREADS
 
 
 
@@ -1140,6 +1144,7 @@ main (int argc, const char *argv[])
     xform = persp * rot * trans * scale;
     xform.invert();
 
+#ifndef NOTHREADS
     if (threadtimes) {
         // If the --iters flag was used, do that number of iterations total
         // (divided among the threads). If not supplied (iters will be 1),
@@ -1172,7 +1177,9 @@ main (int argc, const char *argv[])
         }
         std::cout << "\n";
 
-    } else if (iters > 0 && filenames.size()) {
+    } else
+#endif // NOTHREADS
+    if (iters > 0 && filenames.size()) {
         ustring filename (filenames[0]);
         test_gettextureinfo (filenames[0]);
         const char *texturetype = "Plain Texture";
